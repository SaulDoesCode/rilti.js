{const{isObj:a,isFunc:b,model:c,notifier:d,extend:e}=rilti;rilti.ws=(b,c={})=>{const f=d(),g=new WebSocket(b);return g.onopen=()=>{f.emit.open(f.isOpen=1===g.readyState)},g.onmessage=(a)=>{try{const b=JSON.parse(a.data);f.emit.msg(b,a)}catch(b){c.silent||console.warn(`rilti.ws: couldn't decode json message`),f.emit.msg(a.data,a)}},g.onerror=f.emit.err,g.onclose=f.emit.close,c.defaults||(c.defaults={}),e(f,{ws:g,close(){g.close()},set defaults(b){if(a(b))c.defaults=Object.assign(b,c.defaults);else throw new TypeError('rilti.ws: setDefaults only takes an Object')},get defaults(){return c.defaults},send(b){try{a(b)&&(b=JSON.stringify(Object.assign(b,c.defaults))),1===g.readyState?g.send(b):f.once.open(()=>g.send(b))}catch(a){c.silent||console.error(a)}}})},rilti.cache=(b)=>{const c=new Set,e=d(localforage.createInstance({name:b}));e.delete=(a)=>new Promise((b,d)=>{e.removeItem(a).then(()=>{c.has(a)&&c.delete(a),b(a+' deleted'),e.emit['delete:'+a]()}).catch((b)=>{e.emit.error(a,b),d(' an error occured while attempting to delete '+a)})});let f=!1;e.ready().then(()=>{e.emit.ready(f=!0)}).catch(e.emit.error);const g=new Proxy(e,{set(b,d,e){return f?(a(e)?(e=JSON.stringify(e),c.add(d)):c.has(d)&&c.delete(d),b.setItem(d,e).then(b.emit['set:'+d]).catch((a)=>{b.emit.error(d,a)}),!0):b.once.ready(()=>g[d]=e)},get(a,b){return Reflect.has(a,b)?Reflect.get(a,b):new Promise((d,e)=>{const g=()=>{a.getItem(b).then((e)=>{c.has(b)&&(e=JSON.parse(e)),d(e),a.emit('get:'+b)}).catch((c)=>{e(c),a.emit.error(b,c)})};f?g():a.once.ready(g)})}});return g},rilti.apps={};const f={cache:!0};rilti.app=(a,b={},d={})=>{if(a in rilti.apps)return rilti.apps[a];b=e(b,f,!0);const g=c(d);return b.cache&&(g.cache=rilti.cache(a)),g.eventEmit=(a,b)=>(c,d)=>g.emit(a,b(d,c)),rilti.apps[a]=g,(a)=>a(g,g.cache)}}