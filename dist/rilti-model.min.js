{const{each:a,curry:b,isObj:c,isFunc:d,isEmpty:e}=rilti,f='change:';rilti.model=(g)=>{const h=rilti.notifier(new Map);c(g)&&!e(g)&&a(g,(a,b)=>{h.set(b,a)});const i=h.set.bind(h),j=h.get.bind(h),k=h.delete.bind(h),l=new Map;h.previous=(a)=>l.get(a),h.set=(a,b)=>{return l.has(a)&&h.has(a)||h.emit('new',a,b),l.set(a,b),i(a,b).emit(f+a,b),h},h.get=(a)=>j(a),h.delete=(a)=>{k(a).emit(f+a),h.emit('delete',a),l.delete(a)},h.update=(b)=>a(b,(a,b)=>h.set(b,a));const m=new Map;return h.sync=b((a,b,c=a.value?'value':'textContent')=>{m.has(b)||m.set(b,new Map);const e=m.get(b);e.has(a)&&h.unsync(a,b),a.notifier&&a.notifier.on('destroy',()=>h.unsync(a,b));const g=d(c)?(b)=>c(a,b):(b)=>a[c]=b;return e.set(a,h.on(f+b,g)),h.has(b)&&g(j(b)),a},2),h.unsync=(a,b)=>{if(m.has(b)){const c=m.get(b);if(c.has(a)){const{off:b}=c.get(a);b&&b(),c.delete(a)}c.size||m.delete(b)}return a},h}}
