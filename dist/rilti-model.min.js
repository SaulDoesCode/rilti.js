{const{each:a,curry:b,isFunc:c}=rilti,d='change:';rilti.model=(e={})=>{const f=rilti.notifier(new Map),g=f.set.bind(f),h=f.get.bind(f),i=f.delete.bind(f),j=new Map;a(e,(a,b)=>f.set(b,a)),f.previous=(a)=>j.get(a),f.set=(a,b)=>{return j.has(a)&&f.has(a)||f.emit('new',a,b),j.set(a,b),g(a,b).emit(d+a,b),f},f.get=(a)=>h(a),f.delete=(a)=>{i(a).emit(d+a),f.emit('delete',a),j.delete(a)},f.update=(b)=>a(b,(a,b)=>f.set(b,a));const k=new Map;return f.sync=b((a,b,e=a.value?'value':'textContent')=>{k.has(b)||k.set(b,new Map);const g=k.get(b);g.has(a)&&f.unsync(a,b),a.notifier&&a.notifier.on('destroy',()=>f.unsync(a,b));const i=c(e)?(b)=>e(a,b):(b)=>a[e]=b;return g.set(a,f.on(d+b,i)),f.has(b)&&i(h(b)),a},2),f.unsync=(a,b)=>{if(k.has(b)){const c=k.get(b);if(c.has(a)){const{off:b}=c.get(a);b&&b(),c.delete(a)}c.size||k.delete(b)}return a},f}}
