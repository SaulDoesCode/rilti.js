{const{each:a,extend:b,isPromise:c}=rilti;rilti.model=(d={})=>{const e=new Map,f=b(rilti.notifier({sync(a,b,c=b){return e.has(a)||e.set(a,new Map),e.get(a).set(c,f.on('set:'+c,(c)=>{a[b]=c})),a[b]=d[c],a},unsync(b,c){if(e.has(b)){const d=e.get(b);c?d.has(c)&&(d.get(c).off(),d.delete(c)):a(d,(a)=>a.off()).clear(),d.size||e.delete(b)}return b},update(a,b,c){for(b in a)f[b]=a[b],c||f.emit('set:'+b,f[b])}}),d),g=new Proxy(f,{get(a,b){return f.emit('get:'+b),new Promise((a)=>{f.has(b)?a(f[b]):f.once('set:'+b,a)})}}),h=new Proxy(f,{get(a,b){return f.emit('get:'+b),'async'===b?g:f[b]},set(a,b,d){return c(d)?d.then((a)=>{f.emit('set:'+b,f[b]=a)}):f.emit('set:'+b,f[b]=d),!0}});return h}}