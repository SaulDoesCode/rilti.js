{const{each:a,extend:b,isPromise:c,isDef:d}=rilti;rilti.model=(e={})=>{const f=new Map,g=b(rilti.notifier({sync(a,b,c=b){return f.has(a)||f.set(a,new Map),f.get(a).set(c,g.on('set:'+c,(c)=>{a[b]=c})),d(e[c])&&(a[b]=e[c]),a},syncNode:(a,b,c='textContent')=>g.sync(a,c,b),unsync(b,c){if(f.has(b)){const d=f.get(b);c?d.has(c)&&(d.get(c).off(),d.delete(c)):a(d,(a)=>a.off()).clear(),d.size||f.delete(b)}return b},update(a,b,c){for(b in a)g[b]=a[b],c||g.emit('set:'+b,g[b])},$set:(a,b)=>g.on('set:'+a,b),$get:(a,b)=>g.on('get:'+a,b),$define(a,b){Object.defineProperty(g,a,b)}}),e),h=new Proxy(g,{get:(a,b)=>new Promise((a)=>{g.has(b)?a(g[b]):g.once('set:'+b,a),g.emit('get:'+b)})}),i=new Proxy(g,{get(a,b){return'async'===b?h:b in g?Reflect.get(g.emit('get:'+b),b):'$'===b[0]?(b=b.slice(1),(a)=>d(a)?i[b]=a:i[b]):void 0},set(a,b,d){return c(d)?d.then((a)=>{g.emit('set:'+b,g[b]=a)}):g.emit('set:'+b,g[b]=d),!0}});return i}}